{"0": {
    "doc": "Speech Recognition",
    "title": "Speech Recognition",
    "content": " ",
    "url": "/eevee/metrics/asr.html",
    "relUrl": "/metrics/asr.html"
  },"1": {
    "doc": "Data Structures",
    "title": "Data Structures",
    "content": "# Data Structures Eevee works with CSV label dataframes with items as per [these definitions](https://github.com/skit-ai/dataframes/blob/master/protos/labels.proto). Since label dataframes have `id` for referring back to the data, we just focus on labels in this tool. These labels can be true labels of various kind or coming from predictions of different models. This page documents a few notes about the label representation. Specific details are in the pages for different kinds of metrics [here](./metrics). ## Serialization Each row in the label dataframe CSV is of one of the types defined [here](https://github.com/skit-ai/dataframes/blob/master/protos/labels.proto). In cases where the field type primitive, we serialize items in JSON. In Python, this looks like the following: ```python import pandas as pd # Assuming each item in `items` is a list of entities rows = [{\"id\": i, \"entities\": json.dumps(it)} for i, it in enumerate(items)] pd.DataFrame(rows).to_csv(\"./predictions.csv\", index=False) ``` The following is how correctly serialized structure looks like in a labels CSV: ``` \"[[{\"\"am_score\"\": -278.4794, \"\"confidence\"\": 0.9739978, \"\"lm_score\"\": 13.827044, \"\"transcript\"\": \"\"no\"\"}]]\" ``` If you skip JSON dumping, tools like pandas might still serialize like following: ``` \"[[{'am_score': -278.4794, 'confidence': 0.9739978, 'lm_score': 13.827044, 'transcript': 'no'}]]\" ``` But this won't be read back in `eevee` and you will get a `JSONDecodeError` ``` JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 4 (char 3) ``` ",
    "url": "/eevee/data-structures.html",
    "relUrl": "/data-structures.html"
  },"2": {
    "doc": "Metrics",
    "title": "Metrics",
    "content": " ",
    "url": "/eevee/metrics/",
    "relUrl": "/metrics/"
  },"3": {
    "doc": "Home",
    "title": "Home",
    "content": "# Eevee ![](https://img.shields.io/github/v/tag/skit-ai/eevee.svg?style=flat-square) ![GitHub Workflow Status](https://img.shields.io/github/workflow/status/skit-ai/eevee/CI?style=flat-square) `eevee` is a set of standard evaluation utilities for problems that we work on at [Skit](https://skit.ai). You can use `eevee` both as a python module or as a CLI tool. It works on data files with label structures from [dataframes](https://github.com/skit-ai/dataframes) that has standard datatype definitions. See `./data` directory for example files. ## Installation For now, you have to install eevee using Github release URLs. The current version can be installed by using the following: ```bash pip install https://github.com/skit-ai/eevee/releases/download/0.5.3/eevee-0.5.3-py3-none-any.whl ``` ## Usage Once installed, the most common usage pattern involves passing a reference and predicted label dataframes and get report either for human viewing, or get a json for further machine consumption. Here is how you use it for intents: ```bash eevee intent ./tagged.intent.csv ./predicted.intent.csv ``` Similarly, for WER report you can do this: ```bash eevee asr ./data/tagged.transcriptions.csv ./data/predicted.transcriptions.csv # Value Support # Metric # WER 0.571429 6 # Utterance FPR 0.500000 2 # Utterance FNR 0.250000 4 ``` There are a few advanced unexposed metrics related to ASR. Since they are still work in progress, we have kept a few dependencies from there as _extras_. If you need those, you should install the package in development mode and do `poetry install -E asr`. Then follow the scripts in `./scripts`. ",
    "url": "/eevee/",
    "relUrl": "/"
  },"4": {
    "doc": "Intents",
    "title": "Intents",
    "content": " ",
    "url": "/eevee/metrics/intents.html",
    "relUrl": "/metrics/intents.html"
  },"5": {
    "doc": "Roadmap",
    "title": "Roadmap",
    "content": "# Roadmap ... ",
    "url": "/eevee/roadmap.html",
    "relUrl": "/roadmap.html"
  },"6": {
    "doc": "Slots",
    "title": "Slots",
    "content": " ",
    "url": "/eevee/metrics/slots.html",
    "relUrl": "/metrics/slots.html"
  }
}
